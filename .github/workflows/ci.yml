
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'

jobs:
  # Type checking and linting
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript type checking
      run: npm run check
      
    - name: Lint code
      run: npm run lint
      if: success() || failure()

  # Build application
  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  # Database testing
  database-tests:
    runs-on: ubuntu-latest
    name: Database Tests
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: voxcraft_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: voxcraft_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://voxcraft_test:test_password@localhost:5432/voxcraft_test
      run: |
        npm run db:push
        
    - name: Run database tests
      env:
        DATABASE_URL: postgresql://voxcraft_test:test_password@localhost:5432/voxcraft_test
      run: npm run test:db
      if: success() || failure()

  # Security scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for vulnerabilities
      run: npm audit --audit-level=high

  # End-to-end testing (only on main branch)
  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: [build, database-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        NODE_ENV: production
        PORT: 5000
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:5000

  # Deployment notification
  deploy-notification:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [build, database-tests, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Notify deployment ready
      run: |
        echo "âœ… All checks passed! Ready for deployment to Replit."
        echo "ðŸš€ Navigate to your Replit project and click Deploy to publish changes."
        
    - name: Create deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 'pending',
            state: 'success',
            description: 'Ready for manual deployment on Replit',
            environment: 'production'
          });

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [quality-checks, build, database-tests, security]
    if: always()
    
    steps:
    - name: Clean up artifacts
      uses: actions/github-script@v7
      with:
        script: |
          console.log('Pipeline completed. Cleaning up...');
          // Artifacts are automatically cleaned up based on retention policy
